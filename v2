-- Egg Finder and Hatcher (Delta compatible with automatic egg search and opening)

local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local LocalPlayer = Players.LocalPlayer
local HttpService = game:GetService("HttpService")
local PlaceId = game.PlaceId
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Configuration Variables
local egg_amount = "max" -- Number of eggs to hatch at once (set to "max" for max eggs)
local egg_priority = "void-egg" -- Priority egg (e.g., "aura-egg", "event-1", etc.) 
local open_eggs = true -- Set to true to hatch eggs, false to just find them
local target_eggs = {"aura-egg", "event-1", "event-2", "rainbow-egg", "nightmare-egg", "void-egg", "event-3"} -- List of target eggs

-- Initialize selected egg
local selectedEgg = "void-egg"  -- Default to "aura-egg" if no selection made yet 

-- Server hop function
local checked = {}
function hop()
    print("Waiting 10 seconds before hopping to a new server...")
    wait(10)  -- Delay before hopping to a new server
    
    local cursor = ""
    while true do
        local url = ("https://games.roblox.com/v1/games/%s/servers/Public?limit=100&cursor=%s&sortOrder=Asc"):format(PlaceId, cursor)
        local data = HttpService:JSONDecode(game:HttpGet(url))
        for _, s in ipairs(data.data) do
            if not checked[s.id] and s.playing < s.maxPlayers and s.id ~= game.JobId then
                checked[s.id] = true
                TeleportService:TeleportToPlaceInstance(PlaceId, s.id, LocalPlayer)
                print("Hopped to a new server: " .. s.id)  -- Confirm server hop
                return
            end
        end
        if not data.nextPageCursor then break end
        cursor = data.nextPageCursor
    end
end

-- Function to fly to the egg and start opening it
function flyToEgg(egg)
    local root = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if root and egg then
        local eggPosition = egg.CFrame.Position
        local direction = (eggPosition - root.Position).unit
        -- Fly to the egg (simple approach)
        while (root.Position - eggPosition).Magnitude > 5 do
            root.CFrame = root.CFrame + direction * 10
            wait(0.1)  -- Minimal delay to simulate flying
        end
        -- Once at the egg, open it
        openEgg(egg)
    else
        print("No egg or root part found, cannot fly.")
    end
end

-- Function to hatch the egg (if open_eggs is true)
function openEgg(egg)
    if open_eggs then
        print("Opening egg:", egg.Name)
        
        -- Trigger egg opening action (replace with actual event)
        local eggOpenEvent = ReplicatedStorage:FindFirstChild("EggOpenEvent")
        
        if eggOpenEvent then
            -- Fire the event to open the egg (you might need to send additional parameters)
            eggOpenEvent:FireServer(egg)
        else
            print("EggOpenEvent not found!")
        end
    else
        print("Egg found but not opening:", egg.Name)
    end
end

-- Function to search for eggs with the specified luck and type
function searchForEggs()
    local foundEggs = {}
    
    -- Loop through all objects in workspace
    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj:IsA("Model") and (string.find(obj.Name, "Egg")) then
            -- Check for egg name matching target eggs and luck values
            for _, target in ipairs(target_eggs) do
                if string.find(obj.Name, target) then
                    table.insert(foundEggs, obj)
                    break  -- Stop looking once we find a matching egg
                end
            end
        end
    end
    
    return foundEggs
end

-- Main loop (find egg, teleport, server hop, hatch eggs)
spawn(function()
    while true do
        -- Search for eggs on the server
        local foundEggs = searchForEggs()
        
        -- If no eggs are found, hop to another server
        if #foundEggs == 0 then
            print("No desired eggs found in the current server. Hopping to another server...")
            hop() -- Perform server hop
        else
            -- Fly to the egg (prioritize eggs in the target_eggs list)
            local eggToOpen = foundEggs[1] -- Default to the first egg found
            if egg_priority then
                -- If egg_priority is set, prioritize that egg
                for _, egg in ipairs(foundEggs) do
                    if egg.Name == egg_priority then
                        eggToOpen = egg
                        break
                    end
                end
            end
            -- Fly to the selected egg and open it
            flyToEgg(eggToOpen)
        end
        
        -- Delay of 5 seconds before checking again to give the server time to stabilize
        wait(5)
    end
end)
