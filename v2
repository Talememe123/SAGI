-- Full Script with Server Hop and Luck Egg Search (with 10-second delay before server hop)
local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local LocalPlayer = Players.LocalPlayer
local HttpService = game:GetService("HttpService")
local PlaceId = game.PlaceId

-- Configuration Variables
local egg_amount = "max" -- Number of eggs to hatch at once (set to "max" for max eggs)
local egg_priority = "aura-egg" -- Priority egg (e.g., "aura-egg", "event-1", etc.)
local open_eggs = true -- Set to true to hatch eggs, false to just find them
local target_eggs = {"Void Egg", "Nightmare Egg", "Rainbow Egg", "Aura Egg", "Silly Egg"}  -- List of eggs to search
local luckTags = {"5x", "10x", "25x"}  -- Luck tags for eggs (5x, 10x, 25x)

-- Initialize selected egg
local selectedEgg = "void-egg"  -- Default to "aura-egg" if no selection made yet

-- Function to fly to the egg and start opening it
function flyToEgg(egg)
    local root = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if root and egg then
        local eggPosition = egg.CFrame.Position
        local direction = (eggPosition - root.Position).unit
        -- Fly to the egg (simple approach)
        while (root.Position - eggPosition).Magnitude > 5 do
            root.CFrame = root.CFrame + direction * 10
            wait(0.1)  -- Minimal delay to simulate flying
        end
        -- Once at the egg, open it
        openEgg(egg)
    else
        warn("No egg or root part found, cannot fly.")  -- Using warn() for better visibility
    end
end

-- Function to hatch the egg (if open_eggs is true)
function openEgg(egg)
    if open_eggs then
        print("Opening egg: " .. egg.Name)  -- Use print to log egg opening
        
        -- Trigger egg opening action (replace with actual event)
        local eggOpenEvent = game.ReplicatedStorage:FindFirstChild("EggOpenEvent")
        
        if eggOpenEvent then
            -- Fire the event to open the egg (you might need to send additional parameters)
            eggOpenEvent:FireServer(egg)
        else
            warn("EggOpenEvent not found!")  -- Using warn() for better visibility
        end
    else
        print("Egg found but not opening: " .. egg.Name)  -- Informing that egg is found but not opened
    end
end

-- Server hop function with 10 seconds delay before hopping
local checked = {}
function hop()
    print("Waiting 10 seconds before hopping to a new server...")
    wait(10)  -- Delay before hopping to a new server
    
    local cursor = ""
    while true do
        local url = ("https://games.roblox.com/v1/games/%s/servers/Public?limit=100&cursor=%s&sortOrder=Asc"):format(PlaceId, cursor)
        local data = HttpService:JSONDecode(game:HttpGet(url))
        for _, s in ipairs(data.data) do
            if not checked[s.id] and s.playing < s.maxPlayers and s.id ~= game.JobId then
                checked[s.id] = true
                TeleportService:TeleportToPlaceInstance(PlaceId, s.id, LocalPlayer)
                print("Hopped to a new server: " .. s.id)  -- Confirm server hop
                return
            end
        end
        if not data.nextPageCursor then break end
        cursor = data.nextPageCursor
    end
end

-- Function to search for eggs with luck (5x, 10x, 25x)
function searchForLuckEggs()
    local foundEggs = {}
    
    -- Iterate through all eggs in the workspace
    for _, obj in ipairs(game.Workspace:GetDescendants()) do
        if obj:IsA("Model") and table.find(target_eggs, obj.Name) then
            -- Check if the egg has a luck tag (5x, 10x, or 25x)
            local luckFound = false
            for _, luckTag in ipairs(luckTags) do
                if string.find(obj.Name, luckTag) then
                    luckFound = true
                    break
                end
            end

            -- If the egg has luck, add it to the foundEggs list
            if luckFound then
                table.insert(foundEggs, obj)
                print("Luck Egg found: " .. obj.Name)  -- Log the egg found
            end
        end
    end
    
    return foundEggs
end

-- Main loop (find egg, teleport, server hop, hatch eggs)
spawn(function()
    while true do
        -- Search for luck eggs on the islands
        local foundEggs = searchForLuckEggs()
        
        -- If no eggs are found, hop to another server
        if #foundEggs == 0 then
            print("No luck eggs found in the current server. Hopping to another server...")  -- Log server hop
            hop() -- Perform server hop
        else
            -- Fly to the first found egg with luck
            local eggToOpen = foundEggs[1]  -- Default to the first egg found
            if egg_priority then
                -- If egg_priority is set, prioritize that egg
                for _, egg in ipairs(foundEggs) do
                    if egg.Name == egg_priority then
                        eggToOpen = egg
                        break
                    end
                end
            end
            -- Fly to the selected egg and open it
            flyToEgg(eggToOpen)
        end
        wait(5)  -- Adding a small delay before re-checking (you can adjust this as needed)
    end
end)
