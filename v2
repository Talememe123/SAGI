-- Configuration
local open_eggs = true  -- Set this to false if you don't want to open eggs
local target_eggs = {"void-egg"}  -- Only looking for "void-egg"
local target_lucks = {"5x", "10x", "25x"}  -- Looking for these luck multipliers
local max_search_distance = 50  -- Max distance to detect eggs (in studs)

-- Function to search for eggs with the desired luck and type
function searchForEgg()
    -- Check if the playerâ€™s character exists
    local player = game.Players.LocalPlayer
    local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
    
    if not hrp then
        return nil  -- If the player doesn't have a HumanoidRootPart, exit
    end
    
    -- Loop through the Workspace to find eggs
    for _, obj in ipairs(game.Workspace:GetDescendants()) do
        if obj:IsA("Model") and string.find(obj.Name, "Egg") then
            -- Check if the egg matches the desired type (e.g., "void-egg") and luck multiplier (5x, 10x, or 25x)
            local eggName = obj.Name
            for _, luck in ipairs(target_lucks) do
                if string.find(eggName, luck) and string.find(eggName, "void-egg") then
                    -- Egg matches the criteria, return the egg object
                    return obj
                end
            end
        end
    end
    
    -- If no egg found, return nil
    return nil
end

-- Function to teleport or fly the player to the egg
function teleportToEgg(egg)
    -- Check if the egg is valid and the player exists
    local player = game.Players.LocalPlayer
    local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
    
    if not hrp or not egg then
        return  -- Exit if no valid egg or player
    end
    
    -- Get the position of the egg's main part
    local mainPart = egg:FindFirstChild("Main") or egg:FindFirstChildWhichIsA("Part")
    if mainPart then
        -- Teleport the player to the egg's position (adding some vertical height)
        hrp.CFrame = mainPart.CFrame + Vector3.new(0, 3, 0)  -- Adding a little height for visibility
        print("Flying/Teleporting to egg: " .. egg.Name)
    end
end

-- Server Hop Function
function hop()
    print("Waiting 10 seconds before hopping to a new server...")
    wait(10)  -- Delay before hopping to a new server
    
    local cursor = ""
    while true do
        local url = ("https://games.roblox.com/v1/games/%s/servers/Public?limit=100&cursor=%s&sortOrder=Asc"):format(PlaceId, cursor)
        local data = HttpService:JSONDecode(game:HttpGet(url))
        for _, s in ipairs(data.data) do
            if not checked[s.id] and s.playing < s.maxPlayers and s.id ~= game.JobId then
                checked[s.id] = true
                TeleportService:TeleportToPlaceInstance(PlaceId, s.id, LocalPlayer)
                print("Hopped to a new server: " .. s.id)  -- Confirm server hop
                return
            end
        end
        if not data.nextPageCursor then break end
        cursor = data.nextPageCursor
    end
end

-- Main loop: Search for eggs and teleport to them or hop if none found
while true do
    -- Search for an egg
    local egg = searchForEgg()
    
    -- If an egg is found, teleport to it
    if egg then
        teleportToEgg(egg)
    else
        -- If no egg found, hop to a new server
        print("No suitable egg found in this server, hopping to a new one.")
        hop()
    end
    
    wait(1)  -- Delay between each search cycle (can be adjusted)
end
